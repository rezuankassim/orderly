/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as AuthImport } from './routes/_auth'
import { Route as ProtectedDashboardImport } from './routes/_protected/dashboard'
import { Route as ProtectedSettingsImport } from './routes/_protected/_settings'
import { Route as AuthRegisterImport } from './routes/_auth/register'
import { Route as AuthLoginImport } from './routes/_auth/login'
import { Route as ProtectedServicesIndexImport } from './routes/_protected/services/index'
import { Route as ProtectedCustomersIndexImport } from './routes/_protected/customers/index'
import { Route as ProtectedServicesIdImport } from './routes/_protected/services/$id'
import { Route as ProtectedCustomersIdImport } from './routes/_protected/customers/$id'
import { Route as ProtectedSettingsSettingsTiktokImport } from './routes/_protected/_settings/settings/tiktok'
import { Route as ProtectedSettingsSettingsGeneralImport } from './routes/_protected/_settings/settings/general'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProtectedDashboardRoute = ProtectedDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedSettingsRoute = ProtectedSettingsImport.update({
  id: '/_settings',
  getParentRoute: () => ProtectedRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

const ProtectedServicesIndexRoute = ProtectedServicesIndexImport.update({
  id: '/services/',
  path: '/services/',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedCustomersIndexRoute = ProtectedCustomersIndexImport.update({
  id: '/customers/',
  path: '/customers/',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedServicesIdRoute = ProtectedServicesIdImport.update({
  id: '/services/$id',
  path: '/services/$id',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedCustomersIdRoute = ProtectedCustomersIdImport.update({
  id: '/customers/$id',
  path: '/customers/$id',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedSettingsSettingsTiktokRoute =
  ProtectedSettingsSettingsTiktokImport.update({
    id: '/settings/tiktok',
    path: '/settings/tiktok',
    getParentRoute: () => ProtectedSettingsRoute,
  } as any)

const ProtectedSettingsSettingsGeneralRoute =
  ProtectedSettingsSettingsGeneralImport.update({
    id: '/settings/general',
    path: '/settings/general',
    getParentRoute: () => ProtectedSettingsRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof AuthImport
    }
    '/_protected/_settings': {
      id: '/_protected/_settings'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedSettingsImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/dashboard': {
      id: '/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/customers/$id': {
      id: '/_protected/customers/$id'
      path: '/customers/$id'
      fullPath: '/customers/$id'
      preLoaderRoute: typeof ProtectedCustomersIdImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/services/$id': {
      id: '/_protected/services/$id'
      path: '/services/$id'
      fullPath: '/services/$id'
      preLoaderRoute: typeof ProtectedServicesIdImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/customers/': {
      id: '/_protected/customers/'
      path: '/customers'
      fullPath: '/customers'
      preLoaderRoute: typeof ProtectedCustomersIndexImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/services/': {
      id: '/_protected/services/'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof ProtectedServicesIndexImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/_settings/settings/general': {
      id: '/_protected/_settings/settings/general'
      path: '/settings/general'
      fullPath: '/settings/general'
      preLoaderRoute: typeof ProtectedSettingsSettingsGeneralImport
      parentRoute: typeof ProtectedSettingsImport
    }
    '/_protected/_settings/settings/tiktok': {
      id: '/_protected/_settings/settings/tiktok'
      path: '/settings/tiktok'
      fullPath: '/settings/tiktok'
      preLoaderRoute: typeof ProtectedSettingsSettingsTiktokImport
      parentRoute: typeof ProtectedSettingsImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface ProtectedSettingsRouteChildren {
  ProtectedSettingsSettingsGeneralRoute: typeof ProtectedSettingsSettingsGeneralRoute
  ProtectedSettingsSettingsTiktokRoute: typeof ProtectedSettingsSettingsTiktokRoute
}

const ProtectedSettingsRouteChildren: ProtectedSettingsRouteChildren = {
  ProtectedSettingsSettingsGeneralRoute: ProtectedSettingsSettingsGeneralRoute,
  ProtectedSettingsSettingsTiktokRoute: ProtectedSettingsSettingsTiktokRoute,
}

const ProtectedSettingsRouteWithChildren =
  ProtectedSettingsRoute._addFileChildren(ProtectedSettingsRouteChildren)

interface ProtectedRouteChildren {
  ProtectedSettingsRoute: typeof ProtectedSettingsRouteWithChildren
  ProtectedDashboardRoute: typeof ProtectedDashboardRoute
  ProtectedCustomersIdRoute: typeof ProtectedCustomersIdRoute
  ProtectedServicesIdRoute: typeof ProtectedServicesIdRoute
  ProtectedCustomersIndexRoute: typeof ProtectedCustomersIndexRoute
  ProtectedServicesIndexRoute: typeof ProtectedServicesIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedSettingsRoute: ProtectedSettingsRouteWithChildren,
  ProtectedDashboardRoute: ProtectedDashboardRoute,
  ProtectedCustomersIdRoute: ProtectedCustomersIdRoute,
  ProtectedServicesIdRoute: ProtectedServicesIdRoute,
  ProtectedCustomersIndexRoute: ProtectedCustomersIndexRoute,
  ProtectedServicesIndexRoute: ProtectedServicesIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '': typeof ProtectedSettingsRouteWithChildren
  '/about': typeof AboutLazyRoute
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/customers/$id': typeof ProtectedCustomersIdRoute
  '/services/$id': typeof ProtectedServicesIdRoute
  '/customers': typeof ProtectedCustomersIndexRoute
  '/services': typeof ProtectedServicesIndexRoute
  '/settings/general': typeof ProtectedSettingsSettingsGeneralRoute
  '/settings/tiktok': typeof ProtectedSettingsSettingsTiktokRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '': typeof ProtectedSettingsRouteWithChildren
  '/about': typeof AboutLazyRoute
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/customers/$id': typeof ProtectedCustomersIdRoute
  '/services/$id': typeof ProtectedServicesIdRoute
  '/customers': typeof ProtectedCustomersIndexRoute
  '/services': typeof ProtectedServicesIndexRoute
  '/settings/general': typeof ProtectedSettingsSettingsGeneralRoute
  '/settings/tiktok': typeof ProtectedSettingsSettingsTiktokRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_protected': typeof ProtectedRouteWithChildren
  '/about': typeof AboutLazyRoute
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/register': typeof AuthRegisterRoute
  '/_protected/_settings': typeof ProtectedSettingsRouteWithChildren
  '/_protected/dashboard': typeof ProtectedDashboardRoute
  '/_protected/customers/$id': typeof ProtectedCustomersIdRoute
  '/_protected/services/$id': typeof ProtectedServicesIdRoute
  '/_protected/customers/': typeof ProtectedCustomersIndexRoute
  '/_protected/services/': typeof ProtectedServicesIndexRoute
  '/_protected/_settings/settings/general': typeof ProtectedSettingsSettingsGeneralRoute
  '/_protected/_settings/settings/tiktok': typeof ProtectedSettingsSettingsTiktokRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/login'
    | '/register'
    | '/dashboard'
    | '/customers/$id'
    | '/services/$id'
    | '/customers'
    | '/services'
    | '/settings/general'
    | '/settings/tiktok'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/about'
    | '/login'
    | '/register'
    | '/dashboard'
    | '/customers/$id'
    | '/services/$id'
    | '/customers'
    | '/services'
    | '/settings/general'
    | '/settings/tiktok'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_protected'
    | '/about'
    | '/_auth/login'
    | '/_auth/register'
    | '/_protected/_settings'
    | '/_protected/dashboard'
    | '/_protected/customers/$id'
    | '/_protected/services/$id'
    | '/_protected/customers/'
    | '/_protected/services/'
    | '/_protected/_settings/settings/general'
    | '/_protected/_settings/settings/tiktok'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AuthRoute: typeof AuthRouteWithChildren
  ProtectedRoute: typeof ProtectedRouteWithChildren
  AboutLazyRoute: typeof AboutLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AuthRoute: AuthRouteWithChildren,
  ProtectedRoute: ProtectedRouteWithChildren,
  AboutLazyRoute: AboutLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/_protected",
        "/about"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/login",
        "/_auth/register"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/_settings",
        "/_protected/dashboard",
        "/_protected/customers/$id",
        "/_protected/services/$id",
        "/_protected/customers/",
        "/_protected/services/"
      ]
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/_auth/register": {
      "filePath": "_auth/register.tsx",
      "parent": "/_auth"
    },
    "/_protected/_settings": {
      "filePath": "_protected/_settings.tsx",
      "parent": "/_protected",
      "children": [
        "/_protected/_settings/settings/general",
        "/_protected/_settings/settings/tiktok"
      ]
    },
    "/_protected/dashboard": {
      "filePath": "_protected/dashboard.tsx",
      "parent": "/_protected"
    },
    "/_protected/customers/$id": {
      "filePath": "_protected/customers/$id.tsx",
      "parent": "/_protected"
    },
    "/_protected/services/$id": {
      "filePath": "_protected/services/$id.tsx",
      "parent": "/_protected"
    },
    "/_protected/customers/": {
      "filePath": "_protected/customers/index.tsx",
      "parent": "/_protected"
    },
    "/_protected/services/": {
      "filePath": "_protected/services/index.tsx",
      "parent": "/_protected"
    },
    "/_protected/_settings/settings/general": {
      "filePath": "_protected/_settings/settings/general.tsx",
      "parent": "/_protected/_settings"
    },
    "/_protected/_settings/settings/tiktok": {
      "filePath": "_protected/_settings/settings/tiktok.tsx",
      "parent": "/_protected/_settings"
    }
  }
}
ROUTE_MANIFEST_END */
